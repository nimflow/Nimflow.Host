{"version":3,"sources":["env-vars.ts","utils/get-base-url.ts","libs/i18next.ts","serviceWorker.ts","index.tsx"],"names":["publicUrl","process","_businessDirectoryServerUrl","env","Error","businessDirectoryServerUrl","auth0Domain","auth0ClientId","auth0Audience","persistedConfigurationStorageKey","ensureProperBasePath","str","length","substr","getBasePath","memoizeWith","htmlBase","document","getElementsByTagName","getAttribute","initPromise","undefined","currenti18nLanguage","atom","key","default","initializeI18n","basePath","i18n","use","HttpApi","LanguageDetector","initReactI18next","init","ns","defaultNS","fallbackLng","detection","caches","backend","loadPath","interpolation","escapeValue","formatSeparator","Boolean","window","location","hostname","match","promise","setAutoFreeze","then","error","ReactDOM","render","toString","getElementById","finally","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"0VAEaA,EAAYC,UAEnBC,EAA8BC,IAAI,yCAExC,IAAKD,EACD,MAAM,IAAIE,MAAM,uFAGb,IAAMC,EAA6BH,EAE7BI,EAAcH,IAAI,gBAClBI,EAAgBJ,IAAI,mBACpBK,EAAgBL,IAAI,kBAEpBM,EAAgC,UAAGN,IAAI,gCAAP,QAAmC,8B,gCChBhF,sDAIMO,EAAuB,SAACC,GAO1B,OANmB,IAAfA,EAAIC,QAA2B,MAAXD,EAAI,KACxBA,EAAM,IAAMA,GAEZA,EAAIC,OAAS,GAA6B,MAAxBD,EAAIA,EAAIC,OAAS,KACnCD,EAAMA,EAAIE,OAAO,EAAGF,EAAIC,OAAS,IAE9BD,GAGEG,EAAcC,aACvB,iBAAM,aACN,WAAO,IAAD,EACIC,EAAQ,UAAGC,SAASC,qBAAqB,QAAQ,UAAzC,aAAG,EAA0CC,aAAa,QACxE,OAAIH,EACON,EAAqBM,GAE5BhB,IACOU,EAAqBV,KAEzB,Q,gCCxBf,wHAQIoB,OAA8CC,EAErCC,EAAsBC,YAAyB,CACxDC,IAAK,sBACLC,aAASJ,IAGAK,EAAiB,WAC1B,IAAKN,EAAa,CACd,IAAIO,EAAWb,cACXa,EAASf,OAAS,GAAuC,MAAlCe,EAASA,EAASf,OAAS,KAClDe,GAAY,KAEhBP,EAAcQ,IACTC,IAAIC,KACJD,IAAIE,KACJF,IAAIG,KACJC,KAAK,CACFC,GAAI,CAAC,SAAU,aACfC,UAAW,SACXC,YAAa,KAEbC,UAAW,CACPC,OAAQ,IAGZC,QAAS,CACLC,SAAUb,EAAW,4BAEzBc,cAAe,CACXC,aAAa,EACbC,gBAAiB,OAIjC,OAAOvB,I,uFC/BSwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCTAC,EAAwBvB,cAC9BwB,aAAc,GAEdD,EACKE,MACG,WACI,OAAO,wDAEX,SAAAC,GACIC,IAASC,OAAO,8BAAMF,EAAMG,aAAmBtC,SAASuC,eAAe,YAG9EC,SAAQ,WDsHP,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBT,MAAK,SAAAU,GACJA,EAAaC,gBAEdC,OAAM,SAAAX,GACLY,QAAQZ,MAAMA,EAAMa,iB","file":"static/js/main.108045f7.chunk.js","sourcesContent":["import env from \"@beam-australia/react-env\";\r\n\r\nexport const publicUrl = process.env.PUBLIC_URL;\r\n\r\nconst _businessDirectoryServerUrl = env(\"NIMFLOW_BUSINESS_DIRECTORY_SERVER_URL\");\r\n\r\nif (!_businessDirectoryServerUrl) {\r\n    throw new Error(\"Environment variable REACT_APP_NIMFLOW_BUSINESS_DIRECTORY_SERVER_URL not configured\");\r\n}\r\n\r\nexport const businessDirectoryServerUrl = _businessDirectoryServerUrl; \r\n\r\nexport const auth0Domain = env(\"AUTH0_DOMAIN\");\r\nexport const auth0ClientId = env(\"AUTH0_CLIENT_ID\");\r\nexport const auth0Audience = env(\"AUTH0_AUDIENCE\");\r\n\r\nexport const persistedConfigurationStorageKey = env(\"PERSISTENT_CONFIG_KEY\") ?? \"nimflowPortalConfiguration\";","import {memoizeWith} from \"ramda\";\r\n\r\nimport {publicUrl} from \"../env-vars\";\r\n\r\nconst ensureProperBasePath = (str: string) => {\r\n    if (str.length === 0 || str[0] !== \"/\") {\r\n        str = \"/\" + str;\r\n    }\r\n    if (str.length > 1 && str[str.length - 1] === \"/\") {\r\n        str = str.substr(0, str.length - 1);\r\n    }\r\n    return str;\r\n};\r\n\r\nexport const getBasePath = memoizeWith(\r\n    () => \"baseUrl\",\r\n    () => {\r\n        const htmlBase = document.getElementsByTagName(\"base\")[0]?.getAttribute(\"href\");\r\n        if (htmlBase) {\r\n            return ensureProperBasePath(htmlBase);\r\n        }\r\n        if (publicUrl) {\r\n            return ensureProperBasePath(publicUrl);\r\n        }\r\n        return \"/\";\r\n    }\r\n);\r\n","import i18n, {TFunction} from \"i18next\";\r\nimport {initReactI18next} from \"react-i18next\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\nimport HttpApi from \"i18next-http-backend\";\r\nimport {atom} from \"recoil\";\r\n\r\nimport {getBasePath} from \"../utils/get-base-url\";\r\n\r\nlet initPromise: Promise<TFunction> | undefined = undefined;\r\n\r\nexport const currenti18nLanguage = atom<string | undefined>({\r\n    key: \"currenti18nLanguage\",\r\n    default: undefined,\r\n});\r\n\r\nexport const initializeI18n = () => {\r\n    if (!initPromise) {\r\n        let basePath = getBasePath();\r\n        if (basePath.length > 0 && basePath[basePath.length - 1] !== \"/\") {\r\n            basePath += \"/\";\r\n        }\r\n        initPromise = i18n\r\n            .use(HttpApi)\r\n            .use(LanguageDetector)\r\n            .use(initReactI18next)\r\n            .init({\r\n                ns: [\"common\", \"extension\"],\r\n                defaultNS: \"common\",\r\n                fallbackLng: \"en\",\r\n                //debug: true,\r\n                detection: {\r\n                    caches: [],\r\n                },\r\n                //keySeparator: false, // we do not use keys in form messages.welcome\r\n                backend: {\r\n                    loadPath: basePath + \"i18n/{{lng}}-{{ns}}.json\",\r\n                },\r\n                interpolation: {\r\n                    escapeValue: false, // react already prevents xss\r\n                    formatSeparator: \",\",\r\n                },\r\n            });\r\n    }\r\n    return initPromise;\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import \"./libs/wdyr\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"cropperjs/dist/cropper.css\";\r\nimport \"react-sortable-tree/style.css\";\r\nimport {setAutoFreeze} from \"immer\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport {initializeI18n} from \"./libs/i18next\";\r\n\r\nconst promise: Promise<any> = initializeI18n();\r\nsetAutoFreeze(false);\r\n\r\npromise\r\n    .then(\r\n        () => {\r\n            return import(\"./main\"); // Don't load app until i18n is initialized\r\n        },\r\n        error => {\r\n            ReactDOM.render(<div>{error.toString()}</div>, document.getElementById(\"root\"));\r\n        }\r\n    )\r\n    .finally(() => {\r\n        // If you want your app to work offline and load faster, you can change\r\n        // unregister() to register() below. Note this comes with some pitfalls.\r\n        // Learn more about service workers: https://bit.ly/CRA-PWA\r\n        serviceWorker.unregister();\r\n    });\r\n"],"sourceRoot":""}